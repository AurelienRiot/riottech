// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}





model Category {
  id          String @id @default(uuid())
  products    Product[] @relation("CategoryToProduct")
  name        String
   imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAd   DateTime @updatedAt

}


model Product {
  id           String @id @default(uuid())
  categoryId   String
  category     Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name         String
  description  String @db.VarChar(1000)
  productSpecs String   @db.Text
  priceHT       Float    //
  priceTTC      Float     //
  isFeatured   Boolean @default(false)
  isArchived   Boolean @default(false)
  images       Image[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([categoryId])
}

model Subscription {
  id           String @id @default(uuid())
  name         String
  description  String @db.VarChar(1000)
  productSpecs String @db.VarChar(1000)
  priceHT       Float    
  priceTTC      Float    
  fraisActivation Float    
  recurrence       String 
  dataCap       Float @default(0)
  isFeatured   Boolean @default(false)
  isArchived   Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

}

model Image {
  id        String @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String @id @default(uuid())
  orderItems OrderItem[]
  isPaid     Boolean @default(true)
  totalPrice Float @default(1)
  name       String @default("")
  phone      String @default("")
  address    String @default("")
  pdfUrl String @default("")
  mailSend Boolean @default(false)
  userId      String  //
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])

}

model SubscriptionOrder {
  id         String @id @default(uuid())
  subscriptionItem SubscriptionItem?
  isPaid     Boolean @default(true)
  totalPrice Float @default(1)
  subscriptionPrice Float @default(1)
  countPayment Int @default(0)
  subscriptionHistory SubscriptionHistory[]
  name       String @default("")
  phone      String @default("")
  address    String @default("")
  pdfUrl     String @default("") 
  isActive   Boolean @default(true) 
  userId      String  
  stripeSubscriptionId String? @unique @map(name: "stripe_subscription_id")
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  sim String
  createdAt  DateTime @default(now()) 
  updatedAt  DateTime @updatedAt

  @@index([userId])

}

model SubscriptionHistory {
  id        String @id @default(uuid())
  subscriptionOrderId  String
  subscriptionOrder    SubscriptionOrder @relation(fields: [subscriptionOrderId], references: [id], onDelete: Cascade)
  idStripe String
  price Float 
  status String
  pdfUrl String @default("")
  mailSend Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([subscriptionOrderId])

}


model SubscriptionItem {
  id        String @id @default(uuid())
   name         String
   description  String? @db.VarChar(1000)
   priceHT       Float
   fraisActivation Float
   recurrence       String
   dataCap       Float @default(0)
  
  subscriptionOrderId String @unique
  subscriptionOrder   SubscriptionOrder @relation(fields: [subscriptionOrderId], references: [id], onDelete: Cascade)
 

  @@index([subscriptionOrderId])
}





model OrderItem {
  id        String @id @default(uuid())
  name         String
  description  String @db.VarChar(1000)
  priceHT       Float
  quantity  Int @default(1)
  orderId   String
  order     Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

 

  @@index([orderId])

}


model Contact {
  id       String      @id @default(uuid())
  name     String
  mail     String
  phone    String? 
  subject  String
  message  String  @db.VarChar(1000) 
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 

}

model Account {
  id                 String @unique  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @unique @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String    @unique @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  password String?
  resetPasswordToken String?
  phone            String? 
  image            String?
  role             Role @default(user)
  surname String?
  adresse String? @db.VarChar(1000)
  tva String?
  raisonSocial String?
  stripeCustomerId String? @unique @map(name: "stripe_customer_id")
  orders           Order[]
   subscriptionOrder SubscriptionOrder[]
  accounts         Account[]
  sessions         Session[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt 
}

enum Role {
  user
  admin
  pro
}
